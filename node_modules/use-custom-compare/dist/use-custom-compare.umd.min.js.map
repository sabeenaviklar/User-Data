{"version":3,"file":"use-custom-compare.umd.min.js","sources":["../src/useCustomCompareMemoize.ts","../src/useCustomCompareCallback.ts","../src/useCustomCompareEffect.ts","../src/useCustomCompareLayoutEffect.ts","../src/useCustomCompareMemo.ts"],"sourcesContent":["import { useRef, DependencyList } from 'react';\nimport { DepsAreEqual } from './types';\n\nfunction isPrimitive(val: any) {\n  return val == null || /^[sbn]/.test(typeof val);\n}\n\nexport function checkDeps<TDependencyList extends DependencyList>(\n  deps: readonly [...TDependencyList],\n  depsAreEqual: DepsAreEqual<TDependencyList>,\n  name: string,\n) {\n  const reactHookName = `React.${name.replace(/CustomCompare/, '')}`;\n\n  if (!(deps instanceof Array) || deps.length === 0) {\n    console.warn(\n      `${name} should not be used with no dependencies. Use ${reactHookName} instead.`,\n    );\n  }\n  if (deps.every(isPrimitive)) {\n    console.warn(\n      `${name} should not be used with dependencies that are all primitive values. Use ${reactHookName} instead.`,\n    );\n  }\n  if (typeof depsAreEqual !== 'function') {\n    console.warn(\n      `${name} should be used with depsEqual callback for comparing deps list`,\n    );\n  }\n}\n\nexport function useCustomCompareMemoize<TDependencyList extends DependencyList>(\n  deps: readonly [...TDependencyList],\n  depsAreEqual: DepsAreEqual<readonly [...TDependencyList]>,\n): readonly [...TDependencyList] {\n  const ref = useRef<readonly [...TDependencyList] | undefined>(undefined);\n  const prevRef = useRef<readonly [...TDependencyList] | undefined>(\n    ref.current,\n  );\n\n  if (prevRef.current === undefined || !depsAreEqual(prevRef.current, deps)) {\n    ref.current = deps;\n  }\n\n  prevRef.current = deps;\n\n  return ref.current as readonly [...TDependencyList];\n}\n","import { useCallback, DependencyList } from 'react';\nimport { checkDeps, useCustomCompareMemoize } from './useCustomCompareMemoize';\nimport { DepsAreEqual } from './types';\n\nfunction useCustomCompareCallback<\n  T extends (...args: any[]) => any,\n  TDependencyList extends DependencyList\n>(\n  callback: T,\n  deps: readonly [...TDependencyList],\n  depsEqual: DepsAreEqual<readonly [...TDependencyList]>,\n): T {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(deps, depsEqual, 'useCustomCompareCallback');\n  }\n\n  return useCallback(callback, useCustomCompareMemoize(deps, depsEqual));\n}\n\nexport default useCustomCompareCallback;\n","import { useEffect, EffectCallback, DependencyList } from 'react';\nimport { checkDeps, useCustomCompareMemoize } from './useCustomCompareMemoize';\nimport { DepsAreEqual } from './types';\n\nfunction useCustomCompareEffect<TDependencyList extends DependencyList>(\n  effect: EffectCallback,\n  deps: readonly [...TDependencyList],\n  depsAreEqual: DepsAreEqual<readonly [...TDependencyList]>,\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(deps, depsAreEqual, 'useCustomCompareEffect');\n  }\n\n  useEffect(effect, useCustomCompareMemoize(deps, depsAreEqual));\n}\n\nexport default useCustomCompareEffect;\n","import { useLayoutEffect, EffectCallback, DependencyList } from 'react';\nimport { checkDeps, useCustomCompareMemoize } from './useCustomCompareMemoize';\nimport { DepsAreEqual } from './types';\n\nfunction useCustomCompareLayoutEffect<TDependencyList extends DependencyList>(\n  effect: EffectCallback,\n  deps: readonly [...TDependencyList],\n  depsAreEqual: DepsAreEqual<readonly [...TDependencyList]>,\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(deps, depsAreEqual, 'useCustomCompareLayoutEffect');\n  }\n\n  useLayoutEffect(effect, useCustomCompareMemoize(deps, depsAreEqual));\n}\n\nexport default useCustomCompareLayoutEffect;\n","import { useMemo, DependencyList } from 'react';\nimport { checkDeps, useCustomCompareMemoize } from './useCustomCompareMemoize';\nimport { DepsAreEqual } from './types';\n\nfunction useCustomCompareMemo<T, TDependencyList extends DependencyList>(\n  factory: () => T,\n  deps: readonly [...TDependencyList],\n  depsAreEqual: DepsAreEqual<readonly [...TDependencyList]>,\n): T {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(deps, depsAreEqual, 'useCustomCompareMemo');\n  }\n\n  return useMemo(factory, useCustomCompareMemoize(deps, depsAreEqual));\n}\n\nexport default useCustomCompareMemo;\n"],"names":["isPrimitive","val","test","checkDeps","deps","depsAreEqual","name","reactHookName","replace","Array","length","console","warn","every","useCustomCompareMemoize","ref","useRef","undefined","prevRef","current","callback","depsEqual","process","env","NODE_ENV","useCallback","effect","useEffect","useLayoutEffect","factory","useMemo"],"mappings":"2RAGA,SAASA,EAAYC,GACnB,OAAc,MAAPA,GAAe,SAASC,YAAYD,YAG7BE,EACdC,EACAC,EACAC,GAEA,IAAMC,EAAgB,SAASD,EAAKE,QAAQ,gBAAiB,IAEvDJ,aAAgBK,OAA0B,IAAhBL,EAAKM,QACnCC,QAAQC,KACHN,mDAAqDC,eAGxDH,EAAKS,MAAMb,IACbW,QAAQC,KACHN,8EAAgFC,eAG3D,mBAAjBF,GACTM,QAAQC,KACHN,8EAKOQ,EACdV,EACAC,GAEA,IAAMU,EAAMC,cAAkDC,GACxDC,EAAUF,SACdD,EAAII,SASN,YANwBF,IAApBC,EAAQC,SAA0Bd,EAAaa,EAAQC,QAASf,KAClEW,EAAII,QAAUf,GAGhBc,EAAQC,QAAUf,EAEXW,EAAII,mCC1Cb,SAIEC,EACAhB,EACAiB,GAMA,MAJ6B,eAAzBC,QAAQC,IAAIC,UACdrB,EAAUC,EAAMiB,EAAW,4BAGtBI,cAAYL,EAAUN,EAAwBV,EAAMiB,8BCZ7D,SACEK,EACAtB,EACAC,GAE6B,eAAzBiB,QAAQC,IAAIC,UACdrB,EAAUC,EAAMC,EAAc,0BAGhCsB,YAAUD,EAAQZ,EAAwBV,EAAMC,oCCTlD,SACEqB,EACAtB,EACAC,GAE6B,eAAzBiB,QAAQC,IAAIC,UACdrB,EAAUC,EAAMC,EAAc,gCAGhCuB,kBAAgBF,EAAQZ,EAAwBV,EAAMC,4BCTxD,SACEwB,EACAzB,EACAC,GAMA,MAJ6B,eAAzBiB,QAAQC,IAAIC,UACdrB,EAAUC,EAAMC,EAAc,wBAGzByB,UAAQD,EAASf,EAAwBV,EAAMC"}