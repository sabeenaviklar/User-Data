import { useRef, useEffect, useLayoutEffect, useCallback, useMemo } from 'react';

function isPrimitive(val) {
    return val == null || /^[sbn]/.test(typeof val);
}
function checkDeps(deps, depsAreEqual, name) {
    var reactHookName = "React." + name.replace(/CustomCompare/, '');
    if (!(deps instanceof Array) || deps.length === 0) {
        console.warn(name + " should not be used with no dependencies. Use " + reactHookName + " instead.");
    }
    if (deps.every(isPrimitive)) {
        console.warn(name + " should not be used with dependencies that are all primitive values. Use " + reactHookName + " instead.");
    }
    if (typeof depsAreEqual !== 'function') {
        console.warn(name + " should be used with depsEqual callback for comparing deps list");
    }
}
function useCustomCompareMemoize(deps, depsAreEqual) {
    var ref = useRef(undefined);
    var prevRef = useRef(ref.current);
    if (prevRef.current === undefined || !depsAreEqual(prevRef.current, deps)) {
        ref.current = deps;
    }
    prevRef.current = deps;
    return ref.current;
}

function useCustomCompareEffect(effect, deps, depsAreEqual) {
    if (process.env.NODE_ENV !== 'production') {
        checkDeps(deps, depsAreEqual, 'useCustomCompareEffect');
    }
    useEffect(effect, useCustomCompareMemoize(deps, depsAreEqual));
}

function useCustomCompareLayoutEffect(effect, deps, depsAreEqual) {
    if (process.env.NODE_ENV !== 'production') {
        checkDeps(deps, depsAreEqual, 'useCustomCompareLayoutEffect');
    }
    useLayoutEffect(effect, useCustomCompareMemoize(deps, depsAreEqual));
}

function useCustomCompareCallback(callback, deps, depsEqual) {
    if (process.env.NODE_ENV !== 'production') {
        checkDeps(deps, depsEqual, 'useCustomCompareCallback');
    }
    return useCallback(callback, useCustomCompareMemoize(deps, depsEqual));
}

function useCustomCompareMemo(factory, deps, depsAreEqual) {
    if (process.env.NODE_ENV !== 'production') {
        checkDeps(deps, depsAreEqual, 'useCustomCompareMemo');
    }
    return useMemo(factory, useCustomCompareMemoize(deps, depsAreEqual));
}

export { useCustomCompareCallback, useCustomCompareEffect, useCustomCompareLayoutEffect, useCustomCompareMemo };
//# sourceMappingURL=use-custom-compare.esm.js.map
